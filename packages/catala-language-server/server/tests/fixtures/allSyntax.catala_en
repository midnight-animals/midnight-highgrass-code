```catala
declaration structure Individual:
  data income content money
  data income content boolean
  data income content integer
  data income content decimal
  data income content date
```

```catala
declaration enumeration TaxCredit:
#####
##### <<<<< split up diagnostic error from catala cli
#####
-- NoTaxCredit
-- ChildrenTaxCredit content integer
```

```catala
declaration scope IncomeTaxComputation:
  input individual content Individual
  internal fixed_percentage content decimal
  output income_tax content money
```

```catala
scope IncomeTaxComputation:
  definition income_tax equals
    individual.income * fixed_percentage
```

```catala
scope IncomeTaxComputation:
  definition fixed_percentage under condition
    individual.number_of_children >= 2
  consequence equals 15 %
```

```catala
declaration scope Child:
  input age content integer
  output is_eligible_article_3 condition

scope Child:
  rule is_eligible_article_3 under condition age < 18 consequence fulfilled
```

```catala
declaration structure TwoBrackets:
  data breakpoint content money
  data rate1 content decimal
  data rate2 content decimal

declaration scope TwoBracketsTaxComputation:
  input brackets content TwoBrackets
  output tax_formula content money depends on income content money
```

```catala
scope TwoBracketsTaxComputation:
  definition tax_formula of income equals
    if income <= brackets.breakpoint then
      income * brackets.rate1
    else (
      brackets.breakpoint * brackets.rate1 +
      (income - brackets.breakpoint) * brackets.rate2
    )
```

```catala
declaration scope NewIncomeTaxComputation:
  two_brackets scope TwoBracketsTaxComputation
  input individual content Individual
  output income_tax content money

scope NewIncomeTaxComputation:
  definition two_brackets.brackets equals TwoBrackets {
    -- breakpoint: $100,000
    -- rate1: 20%
    -- rate2: 40%
  }

  definition income_tax equals two_brackets.tax_formula of individual.income
```


```catala
scope NewIncomeTaxComputation:
  definition income_tax under condition
    individual.income <= $10,000
  consequence equals $0
```

```catala
declaration scope Test1:
  tax_computation scope NewIncomeTaxComputation
  output income_tax content money

scope Test1:
  definition
    tax_computation.individual
  equals
    Individual {
      -- income: $230,000
      -- number_of_children: 0
    }

  definition income_tax equals tax_computation.income_tax
  assertion income_tax = $72,000
```

```catala
declaration scope Test2:
  tax_computation scope NewIncomeTaxComputation
  output income_tax content money

scope Test2:
  definition tax_computation.individual equals Individual {
    -- income: $4,000
    -- number_of_children: 0
  }

  definition income_tax equals tax_computation.income_tax
  assertion income_tax = $0
```


```catala
declaration scope NewIncomeTaxComputationFixed:
  two_brackets scope TwoBracketsTaxComputation
  input individual content Individual
  output tax_formula content money depends on income content money
  context output income_tax content money

scope NewIncomeTaxComputationFixed:
  definition two_brackets.brackets equals TwoBrackets {
    -- breakpoint: $100,000
    -- rate1: 20%
    -- rate2: 40%
  }
  definition tax_formula of income equals two_brackets.tax_formula of income
```

```catala
scope NewIncomeTaxComputationFixed:
  label article_5
  definition income_tax equals two_brackets.tax_formula of individual.income

  exception article_5
  definition income_tax under condition
    individual.income <= $10,000
  consequence equals $0
```

```catala
declaration scope Test3:
  tax_computation scope NewIncomeTaxComputationFixed
  output income_tax content money

scope Test3:
  definition tax_computation.individual equals Individual {
    -- income: $4,000
    -- number_of_children: 0
  }

  definition income_tax equals tax_computation.income_tax
  assertion income_tax = $0
```
```catala
scope NewIncomeTaxComputationFixed:
  exception article_5
  definition income_tax under condition
    individual.number_of_children >= 7
  consequence equals $0
```

```catala
declaration scope Test4:
  tax_computation scope NewIncomeTaxComputationFixed
  output income_tax content money

scope Test4:
  definition tax_computation.individual equals Individual {
    -- income: $7,000
    -- number_of_children: 7
  }

  definition income_tax equals tax_computation.income_tax
  assertion income_tax = $0
```

```catala
declaration scope Test5:
  internal individual content Individual
  internal normal_income_tax_computation_applies content boolean
  output income_tax content money

scope Test5:
  definition normal_income_tax_computation_applies equals true
  definition individual equals Individual {
    -- income: $7,000
    -- number_of_children: 7
  }
  definition income_tax equals
    if normal_income_tax_computation_applies then
      (output of NewIncomeTaxComputationFixed with
        { -- individual: individual }).income_tax
    else $0 # Insert some other modes of computation here
```

```catala
declaration scope BasisForFineDetermination:
  tax_computation scope NewIncomeTaxComputationFixed
  input individal content Individual
  output basis_for_fine content money

scope BasisForFineDetermination:
  definition tax_computation.individual equals individual
  definition basis_for_fine equals tax_computation.income_tax

  definition tax_computation.income_tax under condition
    individual.income <= $10,000
  consequence equals $500
```

```catala
declaration scope WealthTax:
  input value_of_buildings_used_for_charity content money
  input total_wealth content money
  internal wealth content money
    state total
    state after_charity_deductions
    state after_capping

scope WealthTax:
  definition wealth state total equals total_wealth
  definition wealth state after_charity_deductions equals
      value_of_buildings_used_for_charity
  definition wealth state after_capping equals
    if wealth >= $2,500,000 then $2,500,000 else wealth
  assertion wealth > $0
```

